#! /usr/bin/env python
# encoding: utf-8
#
# Tool to read out and examine images generated by the sdlogger
#
# Copyright 2013 Andreas Messer <andi@bastelmap.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import struct

def readblock(file):
    type,length = struct.unpack("<2B",file.read(2))
    
    if type == 2:
        length = length - 3
        
    content = file.read(length)
    checksum = file.read(1)
    
    return type,length,content,checksum

def main():
  action = sys.argv[1]
  
  if action.lower() == 'dump':
      file = open(sys.argv[2],'rb')
      
      config = readblock(file)
      
      if config[0] != 1:
          raise Exception('Bad block type')
      
      channels = config[1] - 2
      
      values = struct.unpack('H %uB' % channels, config[2])
      
      sys.stdout.write('# Interval: %ums, ' % values[0] +
                       ', '.join(['channel %u' % x for x in values[1:]])+
                       '\n')
      
      file.seek(512)
      
      while True:
          data = readblock(file)
          
          if data[0] != 2:
              raise Exception('Bad block type')

          if data[1] != (channels * 2 + 4):
              raise Exception('Bad block length')
          
          values = struct.unpack('<L %uH' % channels,data[2])

          sys.stdout.write('%u' % values[0] +
                           ''.join([' %u' % (x & 0xFFF) for x in values[1:]]) +
                           '\n')

if __name__ == '__main__':
  main()
